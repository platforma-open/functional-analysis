wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
ORAResPfconvParamsLib := import(":ORAResImportParams")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
assets := import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")
text := import("text")

wf.prepare(func(args){
	// This function can only accept one reference per key
	inputRegDir := {}
	regIndex := 1
	for gList in args.geneListRef {
		inputRegDir["inputRegDir" + string(regIndex)] = wf.resolve(gList, { errIfMissing: true })
		regIndex = regIndex + 1
	}
	// return {inputRegDir1: wf.resolve(args.geneListRef[0], { errIfMissing: true })}
	return {inputRegDir: inputRegDir}
})

wf.body(func(args) {

	blockId := wf.blockId().getDataAsJson()

	oraPFrameBuilder := pframes.pFrameBuilder()
	oraTop10PFrameBuilder := pframes.pFrameBuilder()

	// Iterate over list of inputs
	// for idx in allIndexes {
	for _, input in args.inputRegDir {
		inputSpec := input.spec
		
		contrast := inputSpec.annotations["pl7.app/label"]
		species := inputSpec.domain["pl7.app/species"]
		pathwayCollection := args.pathwayCollection

		csvGeneList := xsv.exportFrame([input], "csv", {})
		// Join subset options into string to input it as an argument for R
		geneSubset := text.join(args.geneSubset, "_");
		
		ORA := exec.builder().
			software(assets.importSoftware("@platforma-open/milaboratories.functional-analysis.software:over-representation-analysis")).
			arg("--input").arg("geneList.csv").
			arg("--pathway_collection").arg(pathwayCollection).
			arg("--species").arg(species).
			arg("--gene_subset").arg(geneSubset).
			addFile("geneList.csv", csvGeneList).
			saveFile("pathwayEnrichmentResults.csv").
			saveFile("top10PathwayEnrichmentResults.csv").
			printErrStreamToStdout().
			saveStdoutContent().
			cache(24 * 60 * 60 * 1000).
			run()

		ORAResImportParams := ORAResPfconvParamsLib.getColumns(inputSpec, pathwayCollection)
		ORAPf := xsv.importFile(ORA.getFile("pathwayEnrichmentResults.csv"), "csv", ORAResImportParams)
		ORATop10Pf := xsv.importFile(ORA.getFile("top10PathwayEnrichmentResults.csv"), "csv", ORAResImportParams)

		// Keep Pcolumns for export
		for columnName, value in ORAPf { 
			columnSpec := value.spec
			// Include contrast in axes domain
			for ax in columnSpec.axesSpec {
				ax.domain["pl7.app/contrast"] = contrast
			}
			columnData := value.data
			oraPFrameBuilder.add(
				pathwayCollection + " - " + contrast,
				columnSpec,
				columnData

			)
		}

		for columnName, value in ORATop10Pf { 
			columnSpec := value.spec
			// Include contrast in axes domain
			for ax in columnSpec.axesSpec {
				ax.domain["pl7.app/contrast"] = contrast
			}
			columnData := value.data
			oraTop10PFrameBuilder.add(
				pathwayCollection + " - " + contrast,
				columnSpec,
				columnData

			)
		}


	}

	// Build the final PFrames
	oraPf := oraPFrameBuilder.build()
	oraTop10Pf := oraTop10PFrameBuilder.build()

	outputs := {
		ORAPf: oraPf,
		ORATop10Pf: oraTop10Pf
	}
	
	return {
		outputs: outputs,
		exports: {}
	}
})

