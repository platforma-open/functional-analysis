wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
ORAResPfconvParamsLib := import(":ORAResImportParams")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
assets := import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")
text := import("text")

analysisTpl := assets.importTemplate(":enrichment")

wf.prepare(func(args){
	return {
		inputRegDir: wf.resolve(args.geneListRef, { errIfMissing: true })
		}
})

wf.body(func(args) {
	blockId := wf.blockId().getDataAsJson()

	
	targetOutputsLib := import(":target-outputs")

	input := args.inputRegDir
	inputSpec := input.spec
	species := inputSpec.axesSpec[1].domain["pl7.app/species"]
	pathwayCollection := args.pathwayCollection

	ORAResImportParams := ORAResPfconvParamsLib.getColumns(species, pathwayCollection)

	targetOutputs := [
	{
		type: "Xsv",
		xsvType: "csv",
		settings: ORAResPfconvParamsLib.getColumns(species, pathwayCollection),
		name: "allEnrichment",
		path: ["allEnrichmentCsv"]
	},
	{
		type: "Xsv",
		xsvType: "csv",
		settings: ORAResPfconvParamsLib.getColumns(species, pathwayCollection),
		name: "topEnrichment",
		path: ["topEnrichmentCsv"]
	}]

	enrichmentResults := pframes.processColumn(
		{ spec: input.spec, data: input.data },
		analysisTpl,
		targetOutputs,
		// Aggregate is opposite from group, so we use aggregate to group by all other axis combinations
		{
			aggregate: [{
				name: "pl7.app/rna-seq/geneId",
				optional: true
			}],
			// resulting aggregation axes names will be checked against supported combinations
			// in the body template
			passAggregationAxesNames: true,
			// make specs available as __distilled_aggregation_spec__
			passDistilledAggregationSpec: true,

			// will be automatically propagated to all output specs
			// traceSteps: [{type: "milaboratories.star-read-mapping", id: blockId, importance: 20, label: "STAR - " + genomes.getSpeciesName(species)}],

			extra: {
				species: species,
				pathwayCollection: pathwayCollection,
				geneSubset: args.geneSubset,
				contrast: args.contrast
				}
		}
	)


	allEnrichmentPf := pframes.pFrameBuilder()
	// add all columns from first selection results from enrichmentResults ("allEnrichment") into results under "allEnrichment/"
	// Second string can be left empty, but important to have different values if you include multiple pframes into same builder
	enrichmentResults.addXsvOutputToBuilder(allEnrichmentPf, "allEnrichment", "allEnrichment/")

	topEnrichmentPf := pframes.pFrameBuilder()
	enrichmentResults.addXsvOutputToBuilder(topEnrichmentPf, "topEnrichment", "topEnrichment/")
	outputs := {
		ORATop10Pf: pframes.exportFrame(topEnrichmentPf.build()),
		ORAPf: pframes.exportFrame(allEnrichmentPf.build())

	}
	
	return {
		outputs: outputs,
		exports: {}
	}
})

