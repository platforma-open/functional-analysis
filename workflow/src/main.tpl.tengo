wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
ORAResPfconvParamsLib := import(":ORAResImportParams")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
assets := import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
pSpec := import("@platforma-sdk/workflow-tengo:pframes.spec")
text := import("text")

wf.prepare(func(args){
	return {
		inputRegDir: wf.resolve(args.geneListRef, { errIfMissing: true })
		}
})

wf.body(func(args) {

	blockId := wf.blockId().getDataAsJson()

	/////////////////// /TEST
	analysisTpl := assets.importTemplate(":test")
	targetOutputsLib := import(":target-outputs")

	input := args.inputRegDir
	inputSpec := input.spec
	contrast := inputSpec.annotations["pl7.app/label"]
	species := inputSpec.domain["pl7.app/species"]
	pathwayCollection := args.pathwayCollection

	targetOutputs := targetOutputsLib.getTargetOutputs(species, pathwayCollection, blockId)

	enrichmentResults := pframes.processColumn(
		{ spec: input.spec, data: input.data }, analysisTpl,
		targetOutputs,
		// Aggregate is opposite from group, so we use aggregate to group by all other axis combinations
		{
			aggregate: [{
				name: "pl7.app/rna-seq/geneId",
				optional: true
			}],
			// resulting aggregation axes names will be checked against supported combinations
			// in the body template
			passAggregationAxesNames: true,

			// will be automatically propagated to all output specs
			// traceSteps: [{type: "milaboratories.star-read-mapping", id: blockId, importance: 20, label: "STAR - " + genomes.getSpeciesName(species)}],

			extra: {
				species: species,
				pathwayCollection: pathwayCollection,
				geneSubset: args.geneSubset
				}
		}
	)

	/////////////////// /TEST

	allEnrichmentPf := {
		"allEnrichment.spec": enrichmentResults.outputSpec("allEnrichment"),
		"allEnrichment.data": enrichmentResults.outputData("allEnrichment")
	}

	
	
	// ORAResImportParams := ORAResPfconvParamsLib.getColumns(inputSpec, pathwayCollection)
	// ORAPf := xsv.importFile(ORA.getFile("pathwayEnrichmentResults.csv"), "csv", ORAResImportParams, 
	// 													// This changes output format from default to per column
	// 													// So key will be column name and values spec and data
	// 													{splitDataAndSpec: true})
	// ORATop10Pf := xsv.importFile(ORA.getFile("top10PathwayEnrichmentResults.csv"), "csv", ORAResImportParams, 
	// 													{splitDataAndSpec: true})
	// // Runtime Error: assertion error: condition failed: field %!(EXTRA
	// // string="GO - Treated vs Control (UP\\Down-regulated gene list).spec", string=" is already set")

	ll := import("@platforma-sdk/workflow-tengo:ll")
	maps := import("@platforma-sdk/workflow-tengo:maps")
	ll.panic("%v", enrichmentResults.outputSpec("allEnrichment"))
	

	outputs := {
		allEnrichmentPf: pframes.exportFrame(allEnrichmentPf),
		ORATop10Pf: pframes.exportFrame(allEnrichmentPf),
		ORAPf: pframes.exportFrame(allEnrichmentPf)

	}
	
	return {
		outputs: outputs,
		exports: {}
	}
})

