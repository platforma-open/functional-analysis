self := import("@platforma-sdk/workflow-tengo:tpl")

json := import("json")
text := import("text")
ll := import("@platforma-sdk/workflow-tengo:ll")
xsv := import("@platforma-sdk/workflow-tengo:pframes.xsv")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets := import("@platforma-sdk/workflow-tengo:assets")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
pConstants := import("@platforma-sdk/workflow-tengo:pframes.constants")
slices := import("@platforma-sdk/workflow-tengo:slices")
feats := import("@platforma-sdk/workflow-tengo:feats")

self.defineOutputs("allEnrichmentCsv",
	"topEnrichmentCsv")


self.body(func(inputs) {
    // comparison ID will automatically be added to specs
    // but can be accessed with inputs.__value__

	inputData := inputs[pConstants.VALUE_FIELD_NAME]
	aggregationAxesNames := inputs[pConstants.AGGREGATION_AXES_NAMES_FIELD_NAME]

	species := inputs.species
	pathwayCollection := inputs.pathwayCollection
	

    csvGeneList := xsv.exportFrame([inputData], "csv", {})
    // Join subset options into string to input it as an argument for R
    geneSubset := text.join(inputs.geneSubset, "_");

    ORA := exec.builder().
        software(assets.importSoftware("@platforma-open/milaboratories.functional-analysis.software:over-representation-analysis")).
        arg("--input").arg("geneList.csv").
        arg("--pathway_collection").arg(pathwayCollection).
        arg("--species").arg(species).
        arg("--gene_subset").arg(geneSubset).
        addFile("geneList.csv", csvGeneList).
        saveFile("pathwayEnrichmentResults.csv").
        saveFile("top10PathwayEnrichmentResults.csv").
        printErrStreamToStdout().
        saveStdoutContent().
        cache(24 * 60 * 60 * 1000).
        run()

	allEnrichmentCsv := ORA.getFile("pathwayEnrichmentResults.csv")
	topEnrichmentCsv := ORA.getFile("top10PathwayEnrichmentResults.csv")


	output := {
		allEnrichmentCsv: allEnrichmentCsv,
		topEnrichmentCsv: topEnrichmentCsv
	}

	return output

})
